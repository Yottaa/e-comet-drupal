<?php
/**
 * Yottaa Module
 *
 * @author Yong Qu
 *
 * This version includes following features
 *
 *
 */

/**
 * Implementation of hook_boot() for Yottaa module.
 *
 */
function yottaa_boot()
{
  if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $reverse_proxy_addresses = variable_get('reverse_proxy_addresses', array());
    $reverse_proxy_addresses[] = $_SERVER['REMOTE_ADDR'];
    variable_set('reverse_proxy', 1);
    variable_set('reverse_proxy_addresses', $reverse_proxy_addresses);
  }
}

/**
 * Implementation of hook_init() for Yottaa module.
 *
 */
function yottaa_init()
{
  // Include Yottaa utility functions.
  module_load_include('inc', 'yottaa', 'yottaa.utils');
}

/**
 * Implementation of hook_menu() for Yottaa module.
 * Add Yottaa setting link to admin menu.
 */
function yottaa_menu()
{

  $items = array();


  $yottaa_user_id = variable_get('yottaa_user_id', '');
  $yottaa_api_key = variable_get('yottaa_api_key', '');
  $yottaa_site_id = variable_get('yottaa_site_id', '');


  if ($yottaa_user_id == '' || $yottaa_api_key == '' || $yottaa_site_id == '') {

    $items['admin/config/system/yottaa'] = array(
      'title' => 'Yottaa',
      'description' => 'Manage settings of Yottaa site optimizer.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yottaa_new_account'),
      'access callback' => 'user_access',
      'access arguments' => array('administer yottaa'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 1
    );

    $items['admin/config/system/yottaa/new_user'] = array(
      'title' => 'New Yottaa Account',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yottaa_new_account'),
      'access callback' => 'user_access',
      'access arguments' => array('administer yottaa'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 2
    );

    $items['admin/config/system/yottaa/existing_user'] = array(
      'title' => 'Existing Yottaa Account',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yottaa_admin_settings'),
      'access callback' => 'user_access',
      'access arguments' => array('administer yottaa'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3
    );

  } else {
    $items['admin/config/system/yottaa'] = array(
      'title' => 'Yottaa',
      'description' => 'Manage settings of Yottaa site optimizer.',
      'page callback' => 'yottaa_info',
      'access callback' => 'user_access',
      'access arguments' => array('administer yottaa'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 1
    );

    $items['admin/config/system/yottaa/info'] = array(
      'title' => 'Yottaa Info',
      'page callback' => 'yottaa_info',
      'access callback' => 'user_access',
      'access arguments' => array('administer yottaa'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 2
    );

    $items['admin/config/system/yottaa/existing_user'] = array(
      'title' => 'Advanced Configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yottaa_admin_settings'),
      'access callback' => 'user_access',
      'access arguments' => array('administer yottaa'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3
    );

  }

  return $items;
}

/**
 * Implement hook_help()
 */
function yottaa_help($path, $arg)
{
  switch ($path) {
    case 'admin/help#yottaa':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("Yottaa is an easy-to-use cloud service that brings speed, scale and security to any website. It accelerates your site for faster page loads, a better user experience and higher search engine rankings. It prevents your site from failing under heavy load or even attacks. It scales your web infrastructure to a global cloud network with over 20 locations. Further, Yottaa watches your site 24x7 and provides real time visibility into site problems. Thatâ€™s what we mean by \"Optimize, Protect and Monitor.\"") . '<p>';
      return $output;
  }
}

/**
 * Prepare and generate entry form for new Yottaa account.
 */
function yottaa_new_account()
{
  global $user;

  $form['yottaa_new_account'] = array(
    '#type' => 'fieldset',
    '#title' => t('New Yottaa Account'),
    '#description' => t('Registers for a new Yottaa account.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['yottaa_new_account']['yottaa_user_name'] = array(
    '#type' => 'textfield',
    '#title' => t('User Name'),
    '#description' => t('Enter the full user name for your new Yottaa account.'),
    '#default_value' => isset($_GET['yottaa_user_name']) ? filter_xss($_GET['yottaa_user_name']) : $user->name
  );

  $form['yottaa_new_account']['yottaa_user_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#description' => t('Enter the phone number for your new Yottaa account.'),
    '#default_value' => isset($_GET['yottaa_user_phone']) ? filter_xss($_GET['yottaa_user_phone']) : ''
  );

  $form['yottaa_new_account']['yottaa_user_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => t('Enter the email for your new Yottaa account.'),
    '#default_value' => isset($_GET['yottaa_user_email']) ? filter_xss($_GET['yottaa_user_email']) : $user->mail
  );

  $form['yottaa_new_account']['yottaa_site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Name'),
    '#description' => t('Enter the site name for your new Yottaa account.'),
    '#default_value' => isset($_GET['yottaa_site_name']) ? filter_xss($_GET['yottaa_site_name']) : $_SERVER['SERVER_NAME']
  );

  $form['yottaa_new_account']['submit'] = array(
    '#type' => 'submit',
    '#name' => 'create',
    '#value' => 'Create Account',
  );

  return $form;
}

/**
 * Handle Yottaa New Account Submission.
 */
function yottaa_new_account_submit($form, &$form_state)
{
  drupal_set_message(t('New account form has been submitted.'));
  $user_name = $form_state['values']['yottaa_user_name'];
  $user_phone = $form_state['values']['yottaa_user_phone'];
  $user_email = $form_state['values']['yottaa_user_email'];
  $site_name = $form_state['values']['yottaa_site_name'];

  $json_output = yottaa_create_yottaa_account($user_name, $user_email, $user_phone, $site_name);

  if (!isset($json_output["error"])) {
    $user_id = $json_output["user_id"];
    $site_id = $json_output["site_id"];
    $api_key = $json_output["api_key"];
    $preview_url = $json_output["preview_url"];

    drupal_set_message(t('New account form has been created with preview url <a href="@preview_url">@preview_url</a>', array('@preview_url' => $preview_url)));
    drupal_set_message(t('Your Yottaa login information has been sent to your email address @user_email.', array('@user_email' => $user_email)));

    variable_set('yottaa_user_id', $user_id);
    variable_set('yottaa_site_id', $site_id);
    variable_set('yottaa_api_key', $api_key);

    unset ($form_state['storage']);
    menu_rebuild();
    drupal_goto('admin/config/system/yottaa');
  } else {
    $error = $json_output["error"];
    form_set_error('', 'Error received from creating Yottaa user:' . json_encode($error));
  }

}

/**
 * Prepare and generate entry form for Yottaa settings.
 */
function yottaa_admin_settings()
{
  $form['yottaa_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Yottaa Settings'),
    '#description' => t('Settings for Yottaa account including user id, api key and site id.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['yottaa_settings']['yottaa_user_id'] = array(
    '#type' => 'textfield',
    '#title' => t('User Id'),
    '#description' => t('Specify the Yottaa User Id.'),
    '#default_value' => variable_get('yottaa_user_id', ''),
  );

  $form['yottaa_settings']['yottaa_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('Specify the Yottaa API Key.'),
    '#default_value' => variable_get('yottaa_api_key', ''),
  );

  $form['yottaa_settings']['yottaa_site_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Id'),
    '#description' => t('Specify the Yottaa Site Id.'),
    '#default_value' => variable_get('yottaa_site_id', ''),
  );

  $form = system_settings_form($form);

  $form['#submit'][] = 'menu_rebuild';

  return $form;
}

/**
 * Validate Setting inputs for Yottaa
 */
function yottaa_admin_settings_validate($form, &$form_state)
{
  $yottaa_user_id = $form_state['values']['yottaa_user_id'];
  $yottaa_api_key = $form_state['values']['yottaa_api_key'];
  $yottaa_site_id = $form_state['values']['yottaa_site_id'];

  if ($yottaa_user_id != '' && $yottaa_api_key != '' && $yottaa_site_id != '') {
    $output = curl_post_async("https://api.yottaa.com/sites/" . $yottaa_site_id, array("user_id" => $yottaa_user_id), "GET", $yottaa_api_key);
    $json_output = json_decode(parseHttpResponse($output), true);
    if ($json_output == null || isset($json_output["error"]) || isset($json_output["error_response"])) {
      form_set_error('', t('Could not authenticate with Yottaa.'));
    }
  }
}

/**
 * Return permissions for the Yottaa module.
 */
function yottaa_permission()
{
  $perms = array('administer yottaa', 'access yottaa');
  return $perms;
}

/**
 * Register custom themes for yottaa module.
 *
 */
function yottaa_theme($existing, $type, $theme, $path)
{
  return array(
    'yottaa_info' => array(
      'arguments' => array('context' => NULL),
      'file' => 'yottaa.theme.inc'
    ),
    'yottaa_optimizer_activate_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'yottaa.theme.inc',
      'render element' => 'form',
    ),
    'yottaa_optimizer_pause_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'yottaa.theme.inc',
      'render element' => 'form',
    ),
    'yottaa_optimizer_resume_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'yottaa.theme.inc',
      'render element' => 'form',
    ),
    'yottaa_clear_cache_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'yottaa.theme.inc',
      'render element' => 'form',
    ),
    'yottaa_auto_clear_cache_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'yottaa.theme.inc',
      'render element' => 'form',
    )
  );
}

function yottaa_info()
{
  return theme('yottaa_info', array(
                   'children' => ''
                ));
}

/**
 * Implementation of hook_form().
 *
 */
function yottaa_optimizer_activate_form($form, &$form_state)
{
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'activate',
    '#value' => 'Activate Optimizations',
  );

  return $form;
}

/**
 * Implementation of hook_form_submit
 *
 */
function yottaa_optimizer_activate_form_submit($form, &$form_state)
{
  unset($form_state['storage']);
  $form_state['redirect'] = 'admin/config/system/yottaa';
}

/**
 * Implementation of hook_form().
 *
 */
function yottaa_optimizer_pause_form($form, &$form_state)
{
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'activate',
    '#value' => 'Pause Optimizations',
  );

  return $form;
}

/**
 * Implementation of hook_form_submit
 *
 */
function yottaa_optimizer_pause_form_submit($form, &$form_state)
{
  unset($form_state['storage']);
  $json_output = yottaa_pause_yottaa_optimizer();

  if (!isset($json_output["error"])) {
    drupal_set_message(t('Your Yottaa optimizer has been paused.'));
    $form_state['redirect'] = 'admin/config/system/yottaa';
  } else {
    $error = $json_output["error"];
    form_set_error('', 'Error received from pausing Yottaa optimizer:' . json_encode($error));
  }

}

/**
 * Implementation of hook_form().
 *
 */
function yottaa_optimizer_resume_form($form, &$form_state)
{
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'activate',
    '#value' => 'Resume Optimizations',
  );

  return $form;
}

/**
 * Implementation of hook_form_submit
 *
 */
function yottaa_optimizer_resume_form_submit($form, &$form_state)
{
  unset($form_state['storage']);

  $json_output = yottaa_resume_yottaa_optimizer();

  if (!isset($json_output["error"])) {
    drupal_set_message(t('Your Yottaa optimizer has been resumed.'));
    $form_state['redirect'] = 'admin/config/system/yottaa';
  } else {
    $error = $json_output["error"];
    form_set_error('', 'Error received from resuming Yottaa optimizer:' . json_encode($error));
  }
}

/**
 * Implementation of hook_form().
 *
 */
function yottaa_clear_cache_form($form, &$form_state)
{
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'clear',
    '#value' => 'Clear Cache',
  );

  return $form;
}

/**
 * Implementation of hook_form_submit
 *
 */
function yottaa_clear_cache_form_submit($form, &$form_state)
{
  unset($form_state['storage']);
  $json_output = yottaa_flush_yottaa_cache();

  if (!isset($json_output["error"])) {
    drupal_set_message(t('Cache for all of your sites resources has been removed from Yottaa CDN.'));
    $form_state['redirect'] = 'admin/config/system/yottaa';
  } else {
    $error = $json_output["error"];
    form_set_error('', 'Error received from flushing Yottaa cache:' . json_encode($error));
  }

}

/**
 * Implementation of hook_form().
 *
 */
function yottaa_auto_clear_cache_form($form, &$form_state)
{
  $form['yottaa_auto_clear_cache'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically clear Yottaa\'s site optimizer cache on node changes.'),
    '#default_value' => variable_get('yottaa_auto_clear_cache', 1)
  );

  $form['yottaa_enable_proxy_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable drupal proxy mode.'),
    '#default_value' => variable_get('reverse_proxy', 0)
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'clear',
    '#value' => 'Save Settings',
  );

  return $form;
}

/**
 * Implementation of hook_form_submit
 *
 */
function yottaa_auto_clear_cache_form_submit($form, &$form_state)
{
  unset($form_state['storage']);
  variable_set('yottaa_auto_clear_cache', intval($form_state['values']['yottaa_auto_clear_cache']));
  variable_set('reverse_proxy', intval($form_state['values']['yottaa_enable_proxy_mode']));
  $status = intval($form_state['values']['yottaa_auto_clear_cache']) == 1 ? 'enabled' : 'disabled';
  drupal_set_message(t('Automatically clearing Yottaa\'s site optimizer cache is ' . $status . '.'));
  $status = intval($form_state['values']['yottaa_enable_proxy_mode']) == 1 ? 'enabled' : 'disabled';
  drupal_set_message(t('Proxy mode is ' . $status . '.'));
}

/**
 * Implementation of hook_node_update
 *
 * @param $node
 * @return void
 */
function yottaa_node_update($node)
{
  watchdog('yottaa', 'Caught node update event for node @node.', array('@node' => $node->nid), WATCHDOG_DEBUG);
  yottaa_auto_flush_yottaa_cache($node);
}

/**
 * @param $comment
 * @return void
 */
function yottaa_comment_update($comment)
{
  watchdog('yottaa', 'Caught comment update event for node @node.', array('@node' => $comment->nid), WATCHDOG_DEBUG);
  $node = node_load($comment->nid);
  yottaa_auto_flush_yottaa_cache($node);
}

/**
 * @param $comment
 * @return void
 */
function yottaa_comment_insert($comment)
{
  watchdog('yottaa', 'Caught comment insert event for node @node.', array('@node' => $comment->nid), WATCHDOG_DEBUG);
  $node = node_load($comment->nid);
  yottaa_auto_flush_yottaa_cache($node);
}

/**
 * @param $comment
 * @return void
 */
function yottaa_comment_delete($comment)
{
  watchdog('yottaa', 'Caught comment delete event for node @node.', array('@node' => $comment->nid), WATCHDOG_DEBUG);
  $node = node_load($comment->nid);
  yottaa_auto_flush_yottaa_cache($node);
}








